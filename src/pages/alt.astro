---
import Layout from "../layouts/Layout.astro";
import RiveAnimation from "../components/RiveAnimation";
import { Nav } from "../views/components/Nav";
import SceneA from "../views/SceneA.astro";
import SceneB from "../views/SceneB.astro";
---

<Layout>
    <RiveAnimation client:load />

    <div class="video-container">
        <video id="scrollVideo" playsinline preload="auto">
            <source src="/videos/Warp_PROXY_09_smaller_optimized.mp4" type="video/mp4">
        </video>
    </div>

    <main id="content" class="h-[15000px]">
        <Nav />
        <SceneA />
        <SceneB />
    </main>

    <style>
        .video-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            z-index: -1;
            overflow: hidden;
            background: transparent;
        }

        .video-container video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            will-change: transform;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const sceneA = document.getElementById('scnA') as HTMLDivElement;
            const sceneB = document.getElementById('scnB') as HTMLDivElement;

            const video = document.getElementById('scrollVideo') as HTMLVideoElement;
            video.load();

            // Get parameters from URL or use defaults
            const urlParams = new URLSearchParams(window.location.search);
            const fps = parseInt(urlParams.get('fps') || '50');
            const screenHeight = parseInt(urlParams.get('height') || '80000');

            // Update content height based on parameter
            const contentDiv = document.getElementById('content') as HTMLDivElement;
            if (contentDiv) {
                contentDiv.style.height = `${screenHeight}px`;
            }

            let lastUpdate = 0;
            const throttleDelay = 1000 / fps; // Convert fps to milliseconds between updates

            const handleContentVisibility = (scrollY: number) => {
                if (!sceneA || !sceneB) return;

                
                console.log(scrollY);

                if (scrollY > 7300 && scrollY < 16500) {
                    sceneA.classList.remove('opacity-0');
                    sceneA.classList.remove('translate-y-full');
                } else {
                    sceneA.classList.add('opacity-0');
                    sceneA.classList.add('translate-y-full');
                }

                if (scrollY > 21600 && scrollY < 29000) {
                    sceneB.classList.remove('opacity-0');
                    sceneB.classList.remove('translate-y-full');
                } else {
                    sceneB.classList.add('opacity-0');
                    sceneB.classList.add('translate-y-full');
                }
            }

            window.addEventListener('scroll', () => {
                const now = performance.now();
                if (now - lastUpdate < throttleDelay) return;
                lastUpdate = now;

                const scrollTop = window.scrollY;
                const maxScroll = document.body.scrollHeight - window.innerHeight;

                const scrollFraction = scrollTop / maxScroll;
                const videoDuration = video.duration;

                video.currentTime = scrollFraction * videoDuration;

                handleContentVisibility(scrollTop);
            });
        });
    </script>
</Layout>